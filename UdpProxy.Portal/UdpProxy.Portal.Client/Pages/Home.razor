@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using UdpProxy.Portal.Client.Models
@using UdpProxy.Portal.Client.Services
@implements IAsyncDisposable
@inject NavigationManager Navigation
@inject MessageStatisticsService StatisticsService

<PageTitle>UDP Proxy Portal - Device Messages</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">
                <i class="fas fa-satellite-dish"></i> UDP Proxy Portal
            </h1>
            
            <div class="row mb-4">                <div class="col-md-3">
                    <div class="card bg-primary text-white">
                        <div class="card-body">
                            <h5 class="card-title">Total Messages</h5>
                            <h2>@StatisticsService.TotalMessages</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-success text-white">
                        <div class="card-body">
                            <h5 class="card-title">Active Devices</h5>
                            <h2>@StatisticsService.GetActiveDevicesCount(TimeSpan.FromMinutes(5))</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-info text-white">
                        <div class="card-body">
                            <h5 class="card-title">Connection Status</h5>
                            <h6>@GetConnectionStatus()</h6>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-warning text-dark">
                        <div class="card-body">                        <h5 class="card-title">Last Message</h5>
                        <small>@(StatisticsService.GetLastMessageTime()?.ToString("HH:mm:ss") ?? "N/A")</small>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-list"></i> Recent Device Messages
                    </h5>                    <button class="btn btn-outline-secondary btn-sm" @onclick="ClearMessages">
                        <i class="fas fa-trash"></i> Clear
                    </button>
                </div>
                <div class="card-body">                    @if (GetDisplayMessages().Any())
                    {
                        <div class="table-responsive" style="max-height: 500px; overflow-y: auto;">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark sticky-top">
                                    <tr>
                                        <th>Timestamp</th>
                                        <th>Device ID</th>
                                        <th>Data</th>
                                        <th>Source</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var message in GetDisplayMessages())
                                    {
                                        <tr class="@(selectedDeviceId == message.DeviceId ? "table-warning" : "")">
                                            <td><small>@message.Timestamp.ToString("HH:mm:ss.fff")</small></td>
                                            <td><span class="badge bg-secondary">@message.DeviceId</span></td>
                                            <td>@message.Data</td>
                                            <td><small>@message.SourceEndPoint?.ToString()</small></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted py-4">
                            <i class="fas fa-inbox fa-3x mb-3"></i>
                            <p>No messages received yet. Waiting for device messages...</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private string? selectedDeviceId;

    protected override async Task OnInitializedAsync()
    {
        // Check for device filter in query string
        var uri = new Uri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("device", out var deviceId))
        {
            selectedDeviceId = deviceId.FirstOrDefault();
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/deviceMessageHub"))
            .Build();

        hubConnection.On<DeviceMessage>("ReceiveDeviceMessage", (message) =>
        {
            StatisticsService.AddMessage(message);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private string GetConnectionStatus()
    {
        return hubConnection?.State.ToString() ?? "Disconnected";
    }

    private IEnumerable<DeviceMessage> GetDisplayMessages()
    {
        var messages = StatisticsService.GetRecentMessages(100);
        
        if (!string.IsNullOrEmpty(selectedDeviceId))
        {
            messages = messages.Where(m => m.DeviceId == selectedDeviceId);
        }
        
        return messages;
    }

    private void ClearMessages()
    {
        StatisticsService.ClearMessages();
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
