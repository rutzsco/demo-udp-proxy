@page "/devices"
@using Microsoft.AspNetCore.SignalR.Client
@using UdpProxy.Portal.Client.Models
@using UdpProxy.Portal.Client.Services
@implements IAsyncDisposable
@inject NavigationManager Navigation
@inject MessageStatisticsService StatisticsService

<PageTitle>UDP Proxy Portal - Devices</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">
                <i class="fas fa-microchip"></i> Device Management
            </h1>
            
            <div class="row mb-4">
                <div class="col-md-4">
                    <div class="card bg-info text-white">
                        <div class="card-body">
                            <h5 class="card-title">Total Devices</h5>
                            <h2>@deviceCounts.Count</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card bg-success text-white">
                        <div class="card-body">
                            <h5 class="card-title">Active (5 min)</h5>
                            <h2>@StatisticsService.GetActiveDevicesCount(TimeSpan.FromMinutes(5))</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card bg-warning text-dark">
                        <div class="card-body">
                            <h5 class="card-title">Messages/Min</h5>
                            <h2>@StatisticsService.GetMessagesPerMinute(TimeSpan.FromMinutes(5)).ToString("F1")</h2>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-list"></i> Device Statistics
                    </h5>
                    <div>
                        <button class="btn btn-outline-secondary btn-sm me-2" @onclick="RefreshData">
                            <i class="fas fa-refresh"></i> Refresh
                        </button>
                        <button class="btn btn-outline-primary btn-sm" @onclick="() => showInactive = !showInactive">
                            <i class="fas fa-filter"></i> @(showInactive ? "Hide" : "Show") Inactive
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    @if (deviceCounts.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Device ID</th>
                                        <th>Total Messages</th>
                                        <th>Last Seen</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var device in GetFilteredDevices())
                                    {
                                        var lastSeen = deviceLastSeen.GetValueOrDefault(device.Key);
                                        var isActive = lastSeen > DateTime.Now.AddMinutes(-5);
                                        var timeSinceLastSeen = DateTime.Now - lastSeen;
                                        
                                        <tr class="@(isActive ? "" : "table-secondary")">
                                            <td>
                                                <span class="badge @(isActive ? "bg-success" : "bg-secondary")">
                                                    @device.Key
                                                </span>
                                            </td>
                                            <td>@device.Value</td>
                                            <td>
                                                <small>
                                                    @lastSeen.ToString("HH:mm:ss")
                                                    <br/>
                                                    <span class="text-muted">
                                                        @GetTimeAgoText(timeSinceLastSeen)
                                                    </span>
                                                </small>
                                            </td>
                                            <td>
                                                @if (isActive)
                                                {
                                                    <span class="badge bg-success">Active</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">Inactive</span>
                                                }
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewDeviceMessages(device.Key)">
                                                    <i class="fas fa-eye"></i> View Messages
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted py-4">
                            <i class="fas fa-microchip fa-3x mb-3"></i>
                            <p>No devices found. Waiting for device messages...</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private Dictionary<string, int> deviceCounts = new();
    private Dictionary<string, DateTime> deviceLastSeen = new();
    private bool showInactive = true;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/deviceMessageHub"))
            .Build();

        hubConnection.On<DeviceMessage>("ReceiveDeviceMessage", (message) =>
        {
            StatisticsService.AddMessage(message);
            RefreshData();
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        RefreshData();
    }

    private void RefreshData()
    {
        deviceCounts = StatisticsService.GetDeviceMessageCounts();
        deviceLastSeen = StatisticsService.GetDeviceLastSeen();
    }

    private IEnumerable<KeyValuePair<string, int>> GetFilteredDevices()
    {
        var devices = deviceCounts.AsEnumerable();
        
        if (!showInactive)
        {
            devices = devices.Where(d => 
            {
                var lastSeen = deviceLastSeen.GetValueOrDefault(d.Key);
                return lastSeen > DateTime.Now.AddMinutes(-5);
            });
        }
        
        return devices.OrderByDescending(d => deviceLastSeen.GetValueOrDefault(d.Key));
    }

    private string GetTimeAgoText(TimeSpan timeSpan)
    {
        if (timeSpan.TotalSeconds < 60)
            return $"{(int)timeSpan.TotalSeconds}s ago";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes}m ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours}h ago";
        return $"{(int)timeSpan.TotalDays}d ago";
    }

    private void ViewDeviceMessages(string deviceId)
    {
        // Navigate to a filtered view of messages for this device
        Navigation.NavigateTo($"/?device={deviceId}");
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
